//433254 MB-seconds, 24 vcore-seconds
import java.io.IOException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
public class tesst {
	public static class Map extends Mapper<LongWritable, Text, Text, Text>{
	@Override
	protected void map(LongWritable key, Text value,Context context)
			throws IOException, InterruptedException {
		// TODO Auto-generated method stub
		String line =value.toString();
		String str = line.split("\t")[0];
		context.write(new Text(str), new Text("a"));
	}
}
public static class Reduce extends Reducer<Text, Text, Text, Text>{
  @Override
protected void reduce(Text key, Iterable<Text> value, Context context)
		throws IOException, InterruptedException {
	// TODO Auto-generated method stub
		context.write(key, new Text("on"));
}
} 
public static void main(String [] args ) throws IOException, ClassNotFoundException, InterruptedException{
	Configuration conf=new Configuration();
	Job job=Job.getInstance(conf,"sum : ip not equels");
	job.setJarByClass(tesst.class);
	job.setMapperClass(Map.class);
	job.setReducerClass(Reduce.class);
	job.setOutputKeyClass(Text.class);
	job.setOutputValueClass(Text.class);
	job.setNumReduceTasks(1);
	FileInputFormat.addInputPath(job, new Path(args[0]));
	FileOutputFormat.setOutputPath(job, new Path(args[1]));
	job.waitForCompletion(true);
    Long linenumber=job.getCounters().findCounter("org.apache.hadoop.mapreduce.TaskCounter","REDUCE_OUTPUT_RECORDS").getValue();
    System.out.println("去重后的数量为"+linenumber);
    System.out.println("执行完毕");
  
}
}
